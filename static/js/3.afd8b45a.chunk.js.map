{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/photo_icon.png","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDescForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileReduxDescForm","reduxForm","form","handleSubmit","profile","error","className","style","profile_desc","onSubmit","Field","component","Input","type","name","placeholder","validate","Textarea","Object","keys","contacts","map","key","ProfileDesc","isOwner","goToEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contacts","ProfileInfo","Preloader","profile_info","profile_img","backgroundImage","photos","large","image_chooser","photo_icon","src","photoIcon","alt","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","post","person_img","message","likes","maxLength","maxLengthCreator","PostReduxForm","required","MyPosts","memo","posts","p","id","addPost","postText","connect","state","profilePage","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","history","push","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.afd8b45a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bg_img\":\"ProfileInfo_bg_img__eVfA1\",\"profile_img\":\"ProfileInfo_profile_img__2rfz9\",\"image_chooser\":\"ProfileInfo_image_chooser__2Z-Yp\",\"profile_desc\":\"ProfileInfo_profile_desc__Ydm8r\",\"name\":\"ProfileInfo_name__105jw\",\"photo_icon\":\"ProfileInfo_photo_icon__14VBY\"};","module.exports = __webpack_public_path__ + \"static/media/photo_icon.dabff480.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3YWpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3RfXT\",\"person_img\":\"Post_person_img__20c9r\"};","import React, {useEffect, useState} from \"react\";\r\nimport style from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = props => {\r\n    let [editMode, setEditMode] = useState(false); //переключалка редактирования статуса\r\n    let [status, setStatus] = useState(props.status); //сам статус и его отправка на сервер\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true) //зн-е editMode можно менять с помощью setEditMode\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status); //отправка на сервер\r\n    };\r\n    const onStatusChange = e => {\r\n        setStatus(e.currentTarget.value); //изм-е статуса\r\n\r\n    };\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                : <div onDoubleClick={activateEditMode}>{props.status || \"no status\"}</div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\n\r\nconst ProfileDescForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form className={style.profile_desc} onSubmit={handleSubmit}>\r\n            {<button>save</button>}\r\n            {error && <div>{error}</div>}\r\n            <Field component={Input} type=\"text\" name='fullName' placeholder='name' validate={[]}/>\r\n            <div> about me:</div>\r\n            <Field component={Input} type=\"text\" name='aboutMe' placeholder='about me' validate={[]}/>\r\n            <div>Looking for a job: </div>\r\n            <Field component=\"input\" name='lookingForAJob' type=\"checkbox\" validate={[]}/>\r\n            <div>My professional skills </div>\r\n            <Field component={Textarea} name='lookingForAJobDescription' type=\"text\" validate={[]}/>\r\n            <div>\r\n                Contacts:\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key}>{key}: <Field component={Input} type=\"text\" name={'contacts.'+ key} placeholder={key} validate={[]}/></div>\r\n                })}\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileReduxDescForm = reduxForm({form: 'profileDesc'})(ProfileDescForm);\r\n\r\nexport default ProfileReduxDescForm","import React, {useState} from \"react\";\r\nimport style from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/empty_logo2.jpg\";\r\nimport photoIcon from \"../../../assets/images/photo_icon.png\";\r\nimport ProfileReduxDescForm from \"./ProfileDescForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = e => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]); //отправка фото на сервер для сохранения\r\n        }\r\n    };\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const onSubmit = (formData)=>{\r\n        props.saveProfile(formData).then(()=>{ //здесь отправляем данные на сервер\r\n            setEditMode(false); //выключаем режим редактирования\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={style.profile_info}>\r\n            <div className={style.profile_img} style={{backgroundImage: `url(${props.profile.photos.large})` || `url(${userPhoto})`}}>\r\n                {props.isOwner &&\r\n                <div className={style.image_chooser}>\r\n                    <img className={style.photo_icon} src={photoIcon} alt=\"\"/>\r\n                    <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                </div>}\r\n            </div>\r\n            <div className={style.profile_desc}>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            {editMode\r\n                //initialValues использ для передачи значений во все инпуты (в данном случае из profile)\r\n                ? <ProfileReduxDescForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                : <ProfileDesc profile={props.profile}\r\n                               updateStatus={props.updateStatus}\r\n                               status={props.status}\r\n                               isOwner={props.isOwner}\r\n                               goToEditMode={goToEditMode}/>}\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\nconst ProfileDesc = ({profile, updateStatus, status, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={style.profile_desc}>\r\n            {isOwner && <button onClick={goToEditMode}>edit</button>}\r\n            <div className={style.name}>{profile.fullName}</div>\r\n            <div>about me:{profile.aboutMe}</div>\r\n            <div>Looking for a job: {profile.lookingForAJob ? 'on' : 'off'}</div>\r\n            <div>My professional skills {profile.lookingForAJobDescription}</div>\r\n            {Object.keys(profile.contacts).map(key => {\r\n                return <Contacts  key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n    return <div>{contactTitle} : {contactValue}</div>};\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport style from './Post.module.css'\r\n\r\nconst Post = (props)=>{\r\n    return (\r\n        <div className={style.post}>\r\n            <div className={style.person_img}></div>\r\n            {/*<img className={style.person_img} src=\"https://img5.goodfon.ru/wallpaper/nbig/8/c8/lea-seydoux-death-stranding-kojima-productions-hideo-kojima.jpg\" alt=\"\" />*/}\r\n            {/*обязательно в фигурн скобках обращение к параметрам, которые явл объектами со св-вами*/}\r\n            {props.message}\r\n            <div> likes {props.likes}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {memo} from \"react\";\r\nimport style from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst PostForm = props => {\r\n    return (\r\n        <form className={style.form} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name='postText' validate={[required, maxLength]} placeholder='post text'/>\r\n            <button>add post</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst PostReduxForm = reduxForm({form: 'post_form'})(PostForm);\r\n\r\n//у функциональной компоненты аналог метода shouldComponentUpdate - React.memo\r\n//не вызывает перерисовку компоненты если она не изменилась\r\nconst MyPosts = memo((props) => {\r\n\r\n    //если используется классовая компонента, у неё есть метод shouldComponentUpdate\r\n    // //метод спрашивает у компоненты нужно ли ей отрисовываться\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     //отрисовка произойдёт только тогда, когда изменятся props или state\r\n    //     return nextProps !== this.props || nextState !== this.state;\r\n    // }\r\n    let posts = props.posts.map(p => <Post key={p.id} message={p.message} likes={p.likes}/>);\r\n    //чтобы сделать вывод постов обратным НУЖНО ВЕРНУТЬ КОПИЮ МАССИВА PROPS и изменять её\r\n    //let posts = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likes={p.likes}/>);\r\n\r\n    const onSubmit = formData => {\r\n        props.addPost(formData.postText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <PostReduxForm onSubmit={onSubmit}/>\r\n            <div className={style.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n});\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.profilePage.posts\r\n});\r\n\r\nexport default connect(mapStateToProps, {addPost})(MyPosts);","import React from \"react\";\r\nimport style from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId; //считывается собственный id профиля\r\n            if (!userId) { //но если его нет или он не успел прийти то редиректим на страницу авторизации (на время!)\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        this.props.getProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) { //ессли в компоненту пришёл отличающийся id, тогда перерисовка\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     // если присутствует id польз-ля - значит страница не наша\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/> //прокидываем всё из mapStateToProps\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.userId\r\n});\r\n\r\n// compose позволяет последовательно оборачивать HOCs друг в друга\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}