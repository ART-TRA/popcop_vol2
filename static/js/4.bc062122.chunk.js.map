{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","style","dialog_person","dialog_person_link","activeClassName","active","to","name","Message","message","text","maxLength","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogs","map","d","messages","m","dialog_persons","formData","addMessage","newMessageBody","compose","connect","state","messagesPage","isAuth","auth","withAuthRedirect"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,SAAW,4B,oBCAjHD,EAAOC,QAAU,CAAC,cAAgB,kCAAkC,mBAAqB,uCAAuC,OAAS,6B,oBCAzID,EAAOC,QAAU,CAAC,QAAU,2B,wGCYbC,EATI,SAACC,GAChB,IAAMC,EAAO,YAAcD,EAAME,GACjC,OACI,yBAAKC,UAAWC,IAAMC,eAClB,kBAAC,IAAD,CAASF,UAAWC,IAAME,mBAAoBC,gBAAiBH,IAAMI,OAAQC,GAAIR,GAAOD,EAAMU,Q,kBCG3FC,EARC,SAACX,GACb,OACI,yBAAKG,UAAWC,IAAMQ,SACjBZ,EAAMa,O,kCCEfC,EAAYC,YAAiB,KAW3BC,EAAmBC,YAAU,CAACC,KAAM,gBAAjBD,EATL,SAAAjB,GAClB,OACI,0BAAMmB,SAAUnB,EAAMoB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,iBAAiBc,SAAU,CAACC,IAAUX,GAAYY,YAAY,iBAC/F,mDA4BKC,EArBC,SAAC3B,GACb,IAAI4B,EAAU5B,EAAM4B,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMR,GAAI4B,EAAE5B,QACjE6B,EAAW/B,EAAM+B,SAASF,KAAI,SAAAG,GAAC,OAAI,kBAAC,EAAD,CAASnB,KAAMmB,EAAEnB,UAMxD,OACI,yBAAKV,UAAWC,IAAMwB,SAClB,yBAAKzB,UAAWC,IAAM6B,gBACjBL,GAEL,yBAAKzB,UAAWC,IAAM2B,UACjBA,EACD,kBAACf,EAAD,CAAkBG,SAXf,SAAAe,GACXlC,EAAMmC,WAAWD,EAASE,sB,gCCRnBC,sBACXC,aAZoB,SAACC,GACrB,MAAO,CACHR,SAAUQ,EAAMC,aAAaT,SAC7BH,QAASW,EAAMC,aAAaZ,QAE5Ba,OAAQF,EAAMG,KAAKD,UAOE,CAACN,iBAC1BQ,IAFWN,CAGbV","file":"static/js/4.bc062122.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2RpQy\",\"dialog_persons\":\"Dialogs_dialog_persons__dH8um\",\"messages\":\"Dialogs_messages__aV-gr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog_person\":\"DialogItem_dialog_person__bECdQ\",\"dialog_person_link\":\"DialogItem_dialog_person_link__dRA_7\",\"active\":\"DialogItem_active__2R0bH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1rkzA\"};","import React from \"react\";\r\nimport style from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props)=>{\r\n    const path = \"/dialogs/\" + props.id;\r\n    return(\r\n        <div className={style.dialog_person}>\r\n            <NavLink className={style.dialog_person_link} activeClassName={style.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport style from './Message.module.css'\r\n\r\nconst Message = (props)=>{\r\n    return (\r\n        <div className={style.message}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from \"react\";\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nlet maxLength = maxLengthCreator(100);\r\n\r\nconst DialogsForm = props => {\r\n  return(\r\n      <form onSubmit={props.handleSubmit}>\r\n          <Field component={Textarea} name=\"newMessageBody\" validate={[required, maxLength]} placeholder='message text'/>\r\n          <button>add message</button>\r\n      </form>\r\n  )\r\n};\r\n\r\nconst DialogsReduxForm = reduxForm({form: 'dialogs_form'})(DialogsForm);\r\n\r\nconst Dialogs = (props)=>{\r\n    let dialogs = props.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>); //из массива сообщений возвращается компонент DialogItem  с параметрами name, id\r\n    let messages = props.messages.map(m => <Message text={m.text}/>); //из массива сообщений возвращается компонент Message  с параметром text\r\n\r\n    let onSubmit = formData => {\r\n        props.addMessage(formData.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialog_persons}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messages}\r\n                <DialogsReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessage} from \"../../redux/dialogReducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesPage.messages,\r\n        dialogs: state.messagesPage.dialogs,\r\n        //messagesPage: state.messagesPage\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\n//контейнерная компонента при помощи метода connect возвращает презентационную компоненту\r\n//метод connect внутри себя имеет методы подписки на изм-е контента (subscribe(observer))\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}