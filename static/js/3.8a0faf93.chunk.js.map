{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","className","style","profile_info","profile_img","src","photos","large","profile_desc","name","fullName","Preloader","Post","post","person_img","message","likes","maxLength","maxLengthCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","MyPosts","memo","posts","map","p","key","id","formData","addPost","postText","connect","state","profilePage","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","history","push","getProfile","getStatus","React","Component","compose","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.8a0faf93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bg_img\":\"ProfileInfo_bg_img__eVfA1\",\"profile_img\":\"ProfileInfo_profile_img__2rfz9\",\"profile_desc\":\"ProfileInfo_profile_desc__Ydm8r\",\"name\":\"ProfileInfo_name__105jw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3YWpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3RfXT\",\"person_img\":\"Post_person_img__20c9r\"};","import React, {useEffect, useState} from \"react\";\r\nimport style from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = props => {\r\n    //ЭТИ 3 СТРОКИ МОЖНО ЗАПИСАТЬ!!!\r\n    // let stateWithSetState = useState(true); //изначальное значение state - false, возвращает массив из 2ух элементов\r\n    // let editMode = stateWithSetState[0]; // 1е зн-е массива\r\n    // let setEditMode = stateWithSetState[1]; // 2е зн-е, ф-ция, которая будет изм-ть 1е\r\n\r\n    //ВОТ ТАК!!!!!!!!!!!!!\r\n    let [editMode, setEditMode] = useState(false); //переключалка редактирования статуса\r\n    let [status, setStatus] = useState(props.status); //сам статус и его отправка на сервер\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true) //зн-е editMode можно менять с помощью setEditMode\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status); //отправка на сервер\r\n    };\r\n    const onStatusChange = e => {\r\n        setStatus(e.currentTarget.value); //изм-е статуса\r\n\r\n    };\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                : <div onDoubleClick={activateEditMode}>{props.status || \"no status\"}</div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport style from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo=(props)=>{\r\n    if(!props.profile){\r\n        return Preloader\r\n    }\r\n    return(\r\n        <div className={style.profile_info}>\r\n            {/*<img className={style.bg_img} src=\"https://i.playground.ru/p/SCfJ19mum0SsgDhAN1jALA.jpeg\" alt=\"\"/>*/}\r\n            <img className={style.profile_img} src={props.profile.photos.large !==null\r\n                ? props.profile.photos.large\r\n                : \"https://avatars.mds.yandex.net/get-zen_doc/1570751/pub_5d19ee6e8706ab00adcd8102_5d19f32457394600adca835f/scale_1200\"}/>\r\n            <div className={style.profile_desc}>\r\n                <div className={style.name}>{props.profile.fullName}</div>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport style from './Post.module.css'\r\n\r\nconst Post = (props)=>{\r\n    return (\r\n        <div className={style.post}>\r\n            <div className={style.person_img}></div>\r\n            {/*<img className={style.person_img} src=\"https://img5.goodfon.ru/wallpaper/nbig/8/c8/lea-seydoux-death-stranding-kojima-productions-hideo-kojima.jpg\" alt=\"\" />*/}\r\n            {/*обязательно в фигурн скобках обращение к параметрам, которые явл объектами со св-вами*/}\r\n            {props.message}\r\n            <div> likes {props.likes}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {memo} from \"react\";\r\nimport style from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst PostForm = props => {\r\n    return (\r\n        <form className={style.form} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name='postText' validate={[required, maxLength]} placeholder='post text'/>\r\n            <button>add post</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst PostReduxForm = reduxForm({form: 'post_form'})(PostForm);\r\n\r\n//у функциональной компоненты аналог метода shouldComponentUpdate - React.memo\r\n//не вызывает перерисовку компоненты если она не изменилась\r\nconst MyPosts = memo((props) => {\r\n\r\n    //если используется классовая компонента, у неё есть метод shouldComponentUpdate\r\n    // //метод спрашивает у компоненты нужно ли ей отрисовываться\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     //отрисовка произойдёт только тогда, когда изменятся props или state\r\n    //     return nextProps !== this.props || nextState !== this.state;\r\n    // }\r\n    let posts = props.posts.map(p => <Post key={p.id} message={p.message} likes={p.likes}/>);\r\n    //чтобы сделать вывод постов обратным НУЖНО ВЕРНУТЬ КОПИЮ МАССИВА PROPS и изменять её\r\n    //let posts = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likes={p.likes}/>);\r\n\r\n    const onSubmit = formData => {\r\n        props.addPost(formData.postText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <PostReduxForm onSubmit={onSubmit}/>\r\n            <div className={style.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n});\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {addPost})(MyPosts);","import React from \"react\";\r\nimport style from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props)=>{\r\n    return(\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getStatus, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.userId; //считывается собственный id профиля\r\n            if(!userId) { //но если его нет или он не успел прийти то редиректим на страницу авторизации (на время!)\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        this.props.getProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/> //прокидываем всё из mapStateToProps\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.userId\r\n});\r\n\r\n// compose позволяет последовательно оборачивать HOCs друг в друга\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}